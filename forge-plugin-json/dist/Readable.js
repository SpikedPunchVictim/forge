"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonSaxReadStream = exports.JsonChunkReadStream = exports.JsonObjectReadStream = void 0;
const readable_stream_1 = require("readable-stream");
const fs = require("fs-extra");
const Parser_1 = require("stream-json/Parser");
/**
 * This class represents a JSON stream that streams full Objects
 */
class JsonObjectReadStream extends readable_stream_1.Readable {
    constructor(files) {
        super({
            objectMode: true,
            encoding: 'utf8'
        });
        this.files = files;
    }
    _read() {
        try {
            let file = this.files.shift();
            if (file === undefined) {
                this.push(null);
                return;
            }
            fs.readJson(file, (err, obj) => {
                this.push(obj);
            });
        }
        catch (err) {
            this.emit('error', err);
        }
    }
}
exports.JsonObjectReadStream = JsonObjectReadStream;
/**
 * This class implements a Readable stream that streams chunks
 */
class JsonChunkReadStream extends readable_stream_1.Readable {
    constructor(files) {
        super({
            objectMode: true,
            encoding: 'utf8'
        });
        this.stream = undefined;
        this.files = files;
    }
    get isStreaming() {
        return this.stream !== undefined;
    }
    _read() {
        if (!this.isStreaming) {
            let file = this.files.shift();
            if (file === undefined) {
                this.push(null);
                return;
            }
            this.stream = fs.createReadStream(file, { encoding: 'utf8' });
            this.parser = new Parser_1.default();
            this.parser.on('data', (chunk) => {
                this.emit('data', chunk);
            });
            this.parser.on('end', () => {
                this.emit('end');
                this.parser.removeAllListeners();
                this.stream = undefined;
                this.parser = undefined;
            });
            this.parser.on('error', err => this.emit('error', err));
            this.parser.on('pause', () => this.emit('pause'));
            this.parser.on('resume', () => this.emit('resume'));
            this.parser.on('readable', () => this.emit('readable'));
        }
    }
}
exports.JsonChunkReadStream = JsonChunkReadStream;
/**
 * This class implements a SAX-like JSON stream
 */
class JsonSaxReadStream extends readable_stream_1.Readable {
    constructor(files) {
        super({
            objectMode: true,
            encoding: 'utf8'
        });
        this.stream = undefined;
        this.files = files;
    }
    get isStreaming() {
        return this.stream !== undefined;
    }
    _read() {
        if (!this.isStreaming) {
            let file = this.files.shift();
            if (file === undefined) {
                this.push(null);
                return;
            }
            this.stream = fs.createReadStream(file, { encoding: 'utf8' });
            if (this.stream === undefined) {
                throw new Error(`Failed to create a Read stream for file ${file}. Ensure it exsists, and that the path is correct.`);
            }
            this.stream.on('data', (chunk) => {
                this.emit('data', chunk);
            });
            this.stream.on('end', () => {
                var _a;
                this.emit('end');
                (_a = this.stream) === null || _a === void 0 ? void 0 : _a.removeAllListeners();
                this.stream = undefined;
            });
            this.stream.on('error', err => this.emit('error', err));
            this.stream.on('pause', () => this.emit('pause'));
            this.stream.on('resume', () => this.emit('resume'));
            this.stream.on('readable', () => this.emit('readable'));
        }
    }
}
exports.JsonSaxReadStream = JsonSaxReadStream;
//# sourceMappingURL=data:application/json;base64,