"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GmailPlugin = exports.GoogleEnvoy = void 0;
const GoogleStreamOptions_1 = require("./GoogleStreamOptions");
const Readable_1 = require("./Readable");
const googleapis_1 = require("googleapis");
const google_auth_library_1 = require("google-auth-library");
const fs = require("fs-extra");
const Writable_1 = require("./Writable");
const RateLimiter_1 = require("./RateLimiter");
class GoogleEnvoy {
    constructor(options) {
        this.options = options;
    }
}
exports.GoogleEnvoy = GoogleEnvoy;
class GmailPlugin {
    constructor(options) {
        this.name = 'forge-plugin-gmail';
        if (options == null) {
            throw new Error(`No GooglePluginOptions provided for the Google Plugin`);
        }
        this.options = options;
        this.rateLimiter = options.rateLimiter || new RateLimiter_1.GoogleRateLimiter();
    }
    async read(state, step) {
        let options = GoogleStreamOptions_1.GmailReadStreamOptions.fromStep(step.info, this.options);
        let auth = await this.createAuthClient(state, this.options);
        if (auth === undefined) {
            throw new Error(`No authentication provided for a GMail step. Ensure that credentials are provided.`);
        }
        return new Readable_1.GmailReadableStream(options, auth, options.userId || this.options.email, options.streamOptions);
    }
    async write(state, step) {
        let options = GoogleStreamOptions_1.GmailWriteStreamOptions.fromStep(step.info);
        let auth = await this.createAuthClient(state, this.options);
        if (auth === undefined) {
            throw new Error(`No authentication provided for a GMail step. Ensure that credentials are provided.`);
        }
        return new Writable_1.GmailCreateStream(options, auth, options.streamOptions);
    }
    transform(state, step) {
        throw new Error(`Method not implemented. alias: ${step.alias}`);
    }
    async createAuthClient(state, options) {
        if (options.auth.jwt != null) {
            let keyFile = await state.findFile(options.auth.jwt.credsFile);
            if (keyFile === undefined) {
                throw new Error(`Could not find key file ${options.auth.jwt.credsFile} for GMail step.`);
            }
            let creds = await fs.readJson(keyFile);
            let auth = new googleapis_1.google.auth.JWT({
                email: creds.client_email,
                key: creds.private_key,
                keyId: creds.private_key_id,
                scopes: [
                    'https://mail.google.com/',
                    'https://www.googleapis.com/auth/gmail.modify',
                    'https://www.googleapis.com/auth/gmail.readonly',
                ],
                subject: this.options.email
            });
            await auth.authorize();
            return auth;
        }
        if (options.auth.oauth2 != null) {
            let auth = new google_auth_library_1.OAuth2Client(options.auth.oauth2.clientId, options.auth.oauth2.clientSecret, options.auth.oauth2.redirectUrl);
            auth.setCredentials({
                refresh_token: options.auth.oauth2.refreshToken
            });
            return auth;
        }
        return undefined;
    }
}
exports.GmailPlugin = GmailPlugin;
//# sourceMappingURL=data:application/json;base64,