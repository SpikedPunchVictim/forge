"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GmailReadableStream = void 0;
const readable_stream_1 = require("readable-stream");
const googleapis_1 = require("googleapis");
class GmailReadableStream extends readable_stream_1.Readable {
    constructor(readOptions, authClient, userId, options) {
        super({
            ...options,
            objectMode: true
        });
        this.pageToken = undefined;
        this.options = readOptions;
        this.auth = authClient;
        this.userId = userId;
        this.messageIds = new Array();
        this.finished = false;
        this.gmail = googleapis_1.google.gmail({
            version: 'v1',
            auth: authClient
        });
    }
    async _read() {
        var _a, _b;
        try {
            let rateLimiter = this.options.rateLimiter;
            let id = this.messageIds.shift();
            if (id === undefined) {
                this.messageIds = await this.getNextMessageIds();
                id = this.messageIds.shift();
                if (id === undefined) {
                    this.push(null);
                    return;
                }
            }
            let message = await rateLimiter.async(5, 
            //@ts-ignore
            () => this.gmail.users.messages.get({
                userId: this.userId,
                id
            }));
            let data = message.data;
            let attachments = new Array();
            // Pull attachments if needed
            if (this.options.includeAttachments) {
                for (let part of ((_a = data.payload) === null || _a === void 0 ? void 0 : _a.parts) || []) {
                    let attachmentId = (_b = part.body) === null || _b === void 0 ? void 0 : _b.attachmentId;
                    if (part.filename == null || part.filename === '') {
                        continue;
                    }
                    if (attachmentId === null || attachmentId === undefined) {
                        continue;
                    }
                    let attachment = await rateLimiter.async(5, () => {
                        return this.gmail.users.messages.attachments.get({
                            //@ts-ignore
                            userId: this.userId,
                            messageId: data.id,
                            id: attachmentId
                        });
                    });
                    attachments.push({
                        filename: part.filename,
                        mimeType: part.mimeType || '',
                        attachment: attachment.data
                    });
                }
            }
            this.push({
                email: message.data,
                attachments
            });
        }
        catch (err) {
            console.log(err);
            this.destroy(err);
        }
    }
    async getNextMessageIds() {
        let ids = new Array();
        if (this.finished) {
            return ids;
        }
        try {
            let rateLimiter = this.options.rateLimiter;
            // Retrieve a list of message IDs first
            const res = await rateLimiter.async(5, () => this.gmail.users.messages.list({
                pageToken: this.pageToken == null ? undefined : this.pageToken,
                includeSpamTrash: this.options.includeSpamTrash,
                labelIds: this.options.labels,
                q: this.options.query,
                maxResults: this.options.maxResults,
                userId: this.userId
            }));
            this.pageToken = res.data.nextPageToken;
            if (res.data.messages == null) {
                this.finished = true;
                return ids;
            }
            if (this.pageToken == null && res.data.messages.length <= this.options.maxResults) {
                this.finished = true;
            }
            //@ts-ignore
            ids = res.data.messages
                .filter(it => it.id != null)
                .map(it => it.id);
        }
        catch (err) {
            this.destroy(err);
        }
        return ids;
    }
}
exports.GmailReadableStream = GmailReadableStream;
//# sourceMappingURL=data:application/json;base64,