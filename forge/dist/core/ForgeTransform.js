"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForgePipeline = exports.EmptyForgeScript = void 0;
const Utils_1 = require("../utils/Utils");
/**
 * An empty implementation of IForgeScript
 */
class EmptyForgeScript {
    async init(state) {
        return Promise.resolve({});
    }
    async beforeRun(state) {
        return Promise.resolve(true);
    }
    async afterRun(state) {
        return Promise.resolve(true);
    }
}
exports.EmptyForgeScript = EmptyForgeScript;
const EmptyPipelineScriptInstance = new EmptyForgeScript();
class ForgePipeline {
    constructor(name, plugins, script, steps, search) {
        this.name = name;
        this.plugins = Utils_1.isDefined(plugins) ? plugins : new Array();
        this.script = Utils_1.isDefined(script) ? script : EmptyPipelineScriptInstance;
        this.steps = steps;
        this.search = search;
    }
    /**
     * Searches this tranform for a plugin. If none is found, undefined is returned.
     *
     * @param name The name of the plugin
     */
    findPlugin(name) {
        let result = this.plugins.find(plugin => plugin.name.toLowerCase() === name.toLowerCase());
        return Utils_1.isDefined(result) ? result.plugin : undefined;
    }
}
exports.ForgePipeline = ForgePipeline;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9yZ2VUcmFuc2Zvcm0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29yZS9Gb3JnZVRyYW5zZm9ybS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSwwQ0FBMEM7QUFZMUM7O0dBRUc7QUFDSCxNQUFhLGdCQUFnQjtJQUMxQixLQUFLLENBQUMsSUFBSSxDQUFDLEtBQWtCO1FBQzFCLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUM3QixDQUFDO0lBRUQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFrQjtRQUMvQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDL0IsQ0FBQztJQUVELEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBa0I7UUFDOUIsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQy9CLENBQUM7Q0FDSDtBQVpELDRDQVlDO0FBRUQsTUFBTSwyQkFBMkIsR0FBRyxJQUFJLGdCQUFnQixFQUFFLENBQUE7QUFpQjFELE1BQWEsYUFBYTtJQU92QixZQUNHLElBQVksRUFDWixPQUEyQixFQUMzQixNQUFvQixFQUNwQixLQUFtQixFQUNuQixNQUF1QjtRQUV2QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtRQUNoQixJQUFJLENBQUMsT0FBTyxHQUFHLGlCQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLEVBQWUsQ0FBQTtRQUN0RSxJQUFJLENBQUMsTUFBTSxHQUFHLGlCQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsMkJBQTJCLENBQUE7UUFDdEUsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7UUFDbEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7SUFDdkIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxVQUFVLENBQUMsSUFBWTtRQUNwQixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUE7UUFDMUYsT0FBTyxpQkFBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUE7SUFDdkQsQ0FBQztDQUNIO0FBOUJELHNDQThCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElCdWlsZFN0YXRlIH0gZnJvbSAnLi9CdWlsZFN0YXRlJ1xuaW1wb3J0IHsgTmFtZWRQbHVnaW4gfSBmcm9tICcuL05hbWVkUGx1Z2luJ1xuaW1wb3J0IHsgaXNEZWZpbmVkIH0gZnJvbSAnLi4vdXRpbHMvVXRpbHMnXG5pbXBvcnQgeyBJUGx1Z2luIH0gZnJvbSAnLi4vcGx1Z2lucy9JUGx1Z2luJ1xuaW1wb3J0IHsgSVN0ZXAgfSBmcm9tICcuL1N0ZXAnXG5pbXBvcnQgeyBGaWxlU2VhcmNoU2NvcGUgfSBmcm9tICcuL0ZpbGVTZWFyY2hTY29wZSdcbmltcG9ydCB7IEdlbmVyaWNPYmplY3QgfSBmcm9tICcuL0NvbmZpZ0J1aWxkZXInXG5cbmV4cG9ydCBpbnRlcmZhY2UgSUZvcmdlU2NyaXB0IHtcbiAgIGluaXQ6IChzdGF0ZTogSUJ1aWxkU3RhdGUpID0+IFByb21pc2U8R2VuZXJpY09iamVjdD5cbiAgIGJlZm9yZVJ1bjogKHN0YXRlOiBJQnVpbGRTdGF0ZSkgPT4gUHJvbWlzZTxib29sZWFuPlxuICAgYWZ0ZXJSdW46IChzdGF0ZTogSUJ1aWxkU3RhdGUpID0+IFByb21pc2U8Ym9vbGVhbj5cbn1cblxuLyoqXG4gKiBBbiBlbXB0eSBpbXBsZW1lbnRhdGlvbiBvZiBJRm9yZ2VTY3JpcHRcbiAqL1xuZXhwb3J0IGNsYXNzIEVtcHR5Rm9yZ2VTY3JpcHQgaW1wbGVtZW50cyBJRm9yZ2VTY3JpcHQge1xuICAgYXN5bmMgaW5pdChzdGF0ZTogSUJ1aWxkU3RhdGUpOiBQcm9taXNlPEdlbmVyaWNPYmplY3Q+IHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe30pXG4gICB9XG5cbiAgIGFzeW5jIGJlZm9yZVJ1bihzdGF0ZTogSUJ1aWxkU3RhdGUpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSlcbiAgIH1cblxuICAgYXN5bmMgYWZ0ZXJSdW4oc3RhdGU6IElCdWlsZFN0YXRlKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRydWUpXG4gICB9XG59XG5cbmNvbnN0IEVtcHR5UGlwZWxpbmVTY3JpcHRJbnN0YW5jZSA9IG5ldyBFbXB0eUZvcmdlU2NyaXB0KClcblxuZXhwb3J0IGludGVyZmFjZSBJRm9yZ2VQaXBlbGluZSB7XG4gICBuYW1lOiBzdHJpbmdcbiAgIHBsdWdpbnM6IEFycmF5PE5hbWVkUGx1Z2luPlxuICAgc2NyaXB0OiBJRm9yZ2VTY3JpcHRcbiAgIHN0ZXBzOiBJU3RlcFtdXG4gICByZWFkb25seSBzZWFyY2g6IEZpbGVTZWFyY2hTY29wZVxuXG4gICAvKipcbiAgICAqIFNlYXJjaGVzIHRoaXMgdHJhbmZvcm0gZm9yIGEgcGx1Z2luLiBJZiBub25lIGlzIGZvdW5kLCB1bmRlZmluZWQgaXMgcmV0dXJuZWQuXG4gICAgKiBcbiAgICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBwbHVnaW5cbiAgICAqL1xuICAgZmluZFBsdWdpbihuYW1lOiBzdHJpbmcpOiBJUGx1Z2luIHwgdW5kZWZpbmVkXG59XG5cbmV4cG9ydCBjbGFzcyBGb3JnZVBpcGVsaW5lIGltcGxlbWVudHMgSUZvcmdlUGlwZWxpbmUge1xuICAgcHVibGljIG5hbWU6IHN0cmluZ1xuICAgcHVibGljIHBsdWdpbnM6IEFycmF5PE5hbWVkUGx1Z2luPlxuICAgcHVibGljIHNjcmlwdDogSUZvcmdlU2NyaXB0XG4gICBwdWJsaWMgc3RlcHM6IEFycmF5PElTdGVwPlxuICAgcmVhZG9ubHkgc2VhcmNoOiBGaWxlU2VhcmNoU2NvcGVcblxuICAgY29uc3RydWN0b3IoXG4gICAgICBuYW1lOiBzdHJpbmcsXG4gICAgICBwbHVnaW5zOiBBcnJheTxOYW1lZFBsdWdpbj4sXG4gICAgICBzY3JpcHQ6IElGb3JnZVNjcmlwdCxcbiAgICAgIHN0ZXBzOiBBcnJheTxJU3RlcD4sXG4gICAgICBzZWFyY2g6IEZpbGVTZWFyY2hTY29wZVxuICAgKSB7XG4gICAgICB0aGlzLm5hbWUgPSBuYW1lXG4gICAgICB0aGlzLnBsdWdpbnMgPSBpc0RlZmluZWQocGx1Z2lucykgPyBwbHVnaW5zIDogbmV3IEFycmF5PE5hbWVkUGx1Z2luPigpXG4gICAgICB0aGlzLnNjcmlwdCA9IGlzRGVmaW5lZChzY3JpcHQpID8gc2NyaXB0IDogRW1wdHlQaXBlbGluZVNjcmlwdEluc3RhbmNlXG4gICAgICB0aGlzLnN0ZXBzID0gc3RlcHNcbiAgICAgIHRoaXMuc2VhcmNoID0gc2VhcmNoXG4gICB9XG5cbiAgIC8qKlxuICAgICogU2VhcmNoZXMgdGhpcyB0cmFuZm9ybSBmb3IgYSBwbHVnaW4uIElmIG5vbmUgaXMgZm91bmQsIHVuZGVmaW5lZCBpcyByZXR1cm5lZC5cbiAgICAqIFxuICAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgb2YgdGhlIHBsdWdpblxuICAgICovXG4gICBmaW5kUGx1Z2luKG5hbWU6IHN0cmluZyk6IElQbHVnaW4gfCB1bmRlZmluZWQge1xuICAgICAgbGV0IHJlc3VsdCA9IHRoaXMucGx1Z2lucy5maW5kKHBsdWdpbiA9PiBwbHVnaW4ubmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCkpXG4gICAgICByZXR1cm4gaXNEZWZpbmVkKHJlc3VsdCkgPyByZXN1bHQucGx1Z2luIDogdW5kZWZpbmVkXG4gICB9XG59XG4iXX0=