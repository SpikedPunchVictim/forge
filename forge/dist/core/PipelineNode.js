"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PipelineNode = void 0;
const NoOpStream_1 = require("../streams/NoOpStream");
const WriteToManyStream_1 = require("../streams/WriteToManyStream");
/**
 * This class represents a single Node in a Pipeline. Each Node
 * is connected to other Nodes upstream (prev) and downstream (next).
 */
class PipelineNode {
    constructor(step) {
        this.prev = new Array();
        this.next = new Array();
        this._stream = undefined;
        this.step = step;
        this.connected = new Array();
    }
    get stream() {
        return this._stream;
    }
    get alias() {
        return this.step.alias;
    }
    async connect(state) {
        if (this.stream === undefined) {
            await this.makeStream(state);
        }
        for (let prev of this.prev) {
            prev.pipe(this);
        }
        this.pipe(this.next);
    }
    pipe(nodes) {
        var _a;
        let pipeNode = (node) => {
            if (this.connected.includes(node.step.alias)) {
                return;
            }
            if (node.stream === undefined) {
                throw new Error(`Cannot connect PipelineNodes that have no streams`);
            }
            //console.log(`piping [${this.alias}] --> [${node.alias}]`)
            //@ts-ignore
            this.stream.pipe(node.stream);
            //this.stream?.on('data', data => console.log(`${this.alias} ${data}`))
            this.connected.push(node.step.alias);
        };
        if (!Array.isArray(nodes)) {
            pipeNode(nodes);
            return;
        }
        if (nodes.length == 0) {
            return;
        }
        if (nodes.length == 1) {
            pipeNode(nodes[0]);
        }
        else if (nodes.length > 1) {
            // If we're writing to multiple streams, we wrap them in a WriteToManyStream to
            // manage backpressure from all of them.
            let writeToMany = new WriteToManyStream_1.WriteToManyStream(nodes.map(it => it.stream));
            (_a = this.stream) === null || _a === void 0 ? void 0 : _a.pipe(writeToMany);
            this.connected.push(...nodes.map(it => it.alias));
        }
    }
    /**
     * Based on the position in the Pipeline, will setup
     * this node's stream.
     */
    async makeStream(state) {
        if (this.stream !== undefined) {
            return this.stream;
        }
        let hasSource = this.prev.length > 0;
        let hasDest = this.next.length > 0;
        if (!hasSource && !hasDest) {
            this._stream = new NoOpStream_1.NoOpReadStream();
            return this._stream;
        }
        if (!hasSource && hasDest) {
            this._stream = await this.step.plugin.read(state, this.step);
        }
        if (hasSource && !hasDest) {
            this._stream = await this.step.plugin.write(state, this.step);
        }
        if (hasSource && hasDest) {
            this._stream = await this.step.plugin.transform(state, this.step);
        }
        if (this.stream === undefined) {
            throw new Error(`Could not create stream from the step ${this.step.alias}`);
        }
        return this.stream;
    }
}
exports.PipelineNode = PipelineNode;
//# sourceMappingURL=data:application/json;base64,