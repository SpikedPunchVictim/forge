"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildState = void 0;
const path = require('path');
const Logger_1 = require("../utils/Logger");
class BuildState {
    constructor(pipeline, record, options) {
        this.pipeline = pipeline;
        this.record = record;
        this.cwd = options.cwd || process.cwd();
        this.logger = options.logger || new Logger_1.ConsoleLogger();
        this.vault = {};
        this.elapsedTimeMs = 0;
    }
    /**
     * Searches for a file within the resolution scope of a transform
     *
     * @param filePath The relative or absolute file path
     */
    async findFile(filePath) {
        if (path.isAbsolute(filePath)) {
            return filePath;
        }
        return this.pipeline.search.find(filePath);
    }
    async findManyFiles(relativeGlobPath) {
        return this.pipeline.search.findGlob(relativeGlobPath);
    }
    async toAbsolute(relativeFilePaths) {
        let files = Array.isArray(relativeFilePaths) ? relativeFilePaths : new Array(relativeFilePaths);
        let results = new Array();
        for (let file of files) {
            let found = await this.findManyFiles(file);
            results.push(...found);
        }
        return results;
    }
}
exports.BuildState = BuildState;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnVpbGRTdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3JlL0J1aWxkU3RhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBRzVCLDRDQUF3RDtBQW9DeEQsTUFBYSxVQUFVO0lBUXBCLFlBQVksUUFBdUIsRUFBRSxNQUFtQixFQUFFLE9BQXFCO1FBQzVFLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFBO1FBQ3hCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO1FBQ3BCLElBQUksQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUE7UUFDdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxJQUFJLElBQUksc0JBQWEsRUFBRSxDQUFBO1FBQ25ELElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFBO1FBQ2YsSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLENBQUE7SUFDekIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQWdCO1FBQzVCLElBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUMzQixPQUFPLFFBQVEsQ0FBQTtTQUNqQjtRQUVELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQzdDLENBQUM7SUFFRCxLQUFLLENBQUMsYUFBYSxDQUFDLGdCQUF3QjtRQUN6QyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0lBQ3pELENBQUM7SUFFRCxLQUFLLENBQUMsVUFBVSxDQUFDLGlCQUFvQztRQUNsRCxJQUFJLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBUyxpQkFBaUIsQ0FBQyxDQUFBO1FBQ3ZHLElBQUksT0FBTyxHQUFHLElBQUksS0FBSyxFQUFVLENBQUE7UUFFakMsS0FBSSxJQUFJLElBQUksSUFBSSxLQUFLLEVBQUU7WUFDcEIsSUFBSSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQzFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQTtTQUN4QjtRQUVELE9BQU8sT0FBTyxDQUFBO0lBQ2pCLENBQUM7Q0FDSDtBQTdDRCxnQ0E2Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpXG5pbXBvcnQgeyBGb3JnZVBpcGVsaW5lIH0gZnJvbSAnLi9Gb3JnZVRyYW5zZm9ybSdcbmltcG9ydCB7IEJ1aWxkUmVjb3JkIH0gZnJvbSAnLi9CdWlsZFJlY29yZCdcbmltcG9ydCB7IENvbnNvbGVMb2dnZXIsIElMb2dnZXIgfSBmcm9tICcuLi91dGlscy9Mb2dnZXInXG5pbXBvcnQgeyBGb3JnZU9wdGlvbnMgfSBmcm9tICcuL0ZvcmdlT3B0aW9ucydcblxuZXhwb3J0IGludGVyZmFjZSBJQnVpbGRTdGF0ZSB7XG4gICByZWFkb25seSBwaXBlbGluZTogRm9yZ2VQaXBlbGluZVxuICAgcmVhZG9ubHkgcmVjb3JkOiBCdWlsZFJlY29yZFxuICAgcmVhZG9ubHkgY3dkOiBzdHJpbmdcbiAgIHJlYWRvbmx5IGxvZ2dlcjogSUxvZ2dlclxuICAgdmF1bHQ6IGFueVxuICAgZWxhcHNlZFRpbWVNczogbnVtYmVyXG5cbiAgIC8qKlxuICAgICogRmluZHMgdGhlIGFic29sdXRlIHBhdGggdG8gYSBmaWxlLiBUaGlzIGlzIGJhc2VkIG9uIHRoZSByZXNvbHZlXG4gICAgKiBkZWZpbml0aW9ucyBhbmQgY3dkLlxuICAgICogXG4gICAgKiBAcGFyYW0gZmlsZVBhdGggVGhlIHJlbGF0aXZlIFBhdGggdG8gYSBmaWxlXG4gICAgKi9cbiAgIGZpbmRGaWxlKHJlbGF0aXZlUGF0aDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmcgfCB1bmRlZmluZWQ+XG5cbiAgIC8qKlxuICAgICogU2VhcmNoZXMgZm9yIG11bHRpcGxlIGZpbGVzIG1hdGNoaW5nICBnbG9iYmVkIHBhdHRlcm4uIFRoaXMgYWxzb1xuICAgICogd29ya3MgZm9yIG5vbi1nbG9iYmVkIHBhdHRlcm5zLlxuICAgICogXG4gICAgKiBAcGFyYW0gcmVsYXRpdmVHbG9iUGF0aCBBIGdsb2JiZWQgb3Igbm90IGdsb2JiZWQgZmlsZSBwYXRoXG4gICAgKi9cbiAgIGZpbmRNYW55RmlsZXMocmVsYXRpdmVHbG9iUGF0aDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmdbXT5cbiAgIFxuICAgLyoqXG4gICAgKiBDb252ZXJ0cyBhIGxpc3Qgb2YgcmVsYXRpdmUgZmlsZSBwYXRocyB0byBhYnNvbHV0ZSBmaWxlIHBhdGhzLiBJdFxuICAgICogZW5zdXJlcyB0aGF0IGVhY2ggZmlsZSBhbHNvIGV4aXN0cy5cbiAgICAqIFxuICAgICogQHBhcmFtIHJlbGF0aXZlRmlsZVBhdGhzIExpc3Qgb2YgcmVsYXRpdmUgZmlsZXNcbiAgICAqL1xuICAgdG9BYnNvbHV0ZShyZWxhdGl2ZUZpbGVQYXRoczogc3RyaW5nIHwgc3RyaW5nW10pOiBQcm9taXNlPHN0cmluZ1tdPiBcbn1cblxuZXhwb3J0IGNsYXNzIEJ1aWxkU3RhdGUgaW1wbGVtZW50cyBJQnVpbGRTdGF0ZSB7XG4gICByZWFkb25seSBwaXBlbGluZTogRm9yZ2VQaXBlbGluZVxuICAgcmVhZG9ubHkgcmVjb3JkOiBCdWlsZFJlY29yZFxuICAgcmVhZG9ubHkgY3dkOiBzdHJpbmdcbiAgIHJlYWRvbmx5IGxvZ2dlcjogSUxvZ2dlclxuICAgcHVibGljIHZhdWx0OiBhbnlcbiAgIHB1YmxpYyBlbGFwc2VkVGltZU1zOiBudW1iZXJcblxuICAgY29uc3RydWN0b3IocGlwZWxpbmU6IEZvcmdlUGlwZWxpbmUsIHJlY29yZDogQnVpbGRSZWNvcmQsIG9wdGlvbnM6IEZvcmdlT3B0aW9ucykge1xuICAgICAgdGhpcy5waXBlbGluZSA9IHBpcGVsaW5lXG4gICAgICB0aGlzLnJlY29yZCA9IHJlY29yZFxuICAgICAgdGhpcy5jd2QgPSBvcHRpb25zLmN3ZCB8fCBwcm9jZXNzLmN3ZCgpXG4gICAgICB0aGlzLmxvZ2dlciA9IG9wdGlvbnMubG9nZ2VyIHx8IG5ldyBDb25zb2xlTG9nZ2VyKClcbiAgICAgIHRoaXMudmF1bHQgPSB7fVxuICAgICAgdGhpcy5lbGFwc2VkVGltZU1zID0gMFxuICAgfVxuXG4gICAvKipcbiAgICAqIFNlYXJjaGVzIGZvciBhIGZpbGUgd2l0aGluIHRoZSByZXNvbHV0aW9uIHNjb3BlIG9mIGEgdHJhbnNmb3JtXG4gICAgKiBcbiAgICAqIEBwYXJhbSBmaWxlUGF0aCBUaGUgcmVsYXRpdmUgb3IgYWJzb2x1dGUgZmlsZSBwYXRoXG4gICAgKi9cbiAgIGFzeW5jIGZpbmRGaWxlKGZpbGVQYXRoOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD4ge1xuICAgICAgaWYocGF0aC5pc0Fic29sdXRlKGZpbGVQYXRoKSkge1xuICAgICAgICAgcmV0dXJuIGZpbGVQYXRoXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnBpcGVsaW5lLnNlYXJjaC5maW5kKGZpbGVQYXRoKVxuICAgfVxuXG4gICBhc3luYyBmaW5kTWFueUZpbGVzKHJlbGF0aXZlR2xvYlBhdGg6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICAgIHJldHVybiB0aGlzLnBpcGVsaW5lLnNlYXJjaC5maW5kR2xvYihyZWxhdGl2ZUdsb2JQYXRoKVxuICAgfVxuXG4gICBhc3luYyB0b0Fic29sdXRlKHJlbGF0aXZlRmlsZVBhdGhzOiBzdHJpbmcgfCBzdHJpbmdbXSk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICAgIGxldCBmaWxlcyA9IEFycmF5LmlzQXJyYXkocmVsYXRpdmVGaWxlUGF0aHMpID8gcmVsYXRpdmVGaWxlUGF0aHMgOiBuZXcgQXJyYXk8c3RyaW5nPihyZWxhdGl2ZUZpbGVQYXRocylcbiAgICAgIGxldCByZXN1bHRzID0gbmV3IEFycmF5PHN0cmluZz4oKVxuXG4gICAgICBmb3IobGV0IGZpbGUgb2YgZmlsZXMpIHtcbiAgICAgICAgIGxldCBmb3VuZCA9IGF3YWl0IHRoaXMuZmluZE1hbnlGaWxlcyhmaWxlKVxuICAgICAgICAgcmVzdWx0cy5wdXNoKC4uLmZvdW5kKSAgICAgICAgIFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0c1xuICAgfVxufSJdfQ==